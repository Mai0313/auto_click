[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
  "--quiet",
  "--cov=src",
  "--cov-report=term-missing:skip-covered",
  "--junitxml=./.github/reports/pytest.xml",
  "--cov-report=xml:./.github/reports/coverage.xml",
  "--cache-clear",
  "-n=auto",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
  "skip_when_ci: Skip when CI/CD",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "raise ValueError()",
    "raise AssertionError()",
    "update_function_signature",
    "update_tool_signature",
    "if __name__ == .__main__.:",
    "if user_id is None and default_headers:",
]

[tool.coverage.html]
directory = "./.github/coverage_html_report"


# ================== #
#        Rye         #
# ================== #

[project]
name = "auto-click"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "Wei", email = "mai@mai0313.com" }
]
dependencies = [
    "pillow>=10.3.0",
    "logfire>=0.40.0",
    "adbutils>=2.7.2",
    "omegaconf>=2.3.0",
    "pyautogui>=0.9.54",
    "playwright>=1.44.0",
    "pygetwindow>=0.0.9",
    "opencv-python>=4.10.0.82",
    "pydantic>=2.7.3",
    "pyinstaller>=6.7.0",
    "autorootcwd>=1.0.0",
    "hydra-core>=1.3.2",
    "hydra-colorlog>=1.2.0",
    "hydra-optuna-sweeper>=1.2.0",
    "rootutils>=1.0.7",
]
readme = "README.md"
requires-python = ">= 3.10"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "ipykernel>=6.29.5",
    "ipywidgets>=8.1.3",
    "pre-commit>=3.7.1",
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
    "pytest-asyncio>=0.23.8",
    "genbadge[all]>=1.1.1",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/auto_click"]

# ================== #
#        RUFF        #
# ================== #
[tool.ruff]

# required-version = "0.1.8"

# Enable Auto Fixing.
fix = true

# Enumerate all fixed violations.
show-fixes = true

# In addition to the standard set of exclusions, omit all tests, plus a specific file.
extend-exclude = ["logs", "data", "*.sql", "__init__.py", "*.svg"]

# In addition to the standard set of inclusions, include `.pyw` files.
extend-include = ["**/*.ipynb", "*.sh"]

# Allow imports relative to the "src" and "test" directories.
src = ["*"]

# Assume Python 3.9.*
target-version = "py39"

# Set the cache directory to `logs/ruff_cache`.
cache-dir = "~/.cache/ruff"  # default: ".ruff_cache", now it is not allowed to create cache dir in logs

# Group violations by containing file.
# This is output message format; nothing about coding
# Type: "full" | "concise" | "grouped" | "json" | "junit" | "github" | "gitlab" | "pylint" | "azure"
output-format = "pylint"

# Same as Google Python Style Guide.
line-length = 99


[tool.ruff.lint]

task-tags = ["TODO", "FIXME", "BUG", "XXX", "REFACT", "NOTE", "MARK", "HACK"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
# Ref: https://beta.ruff.rs/docs/rules/#ruff-specific-rules-ruf
fixable = ["ALL"]
unfixable = []
allowed-confusables = ["。", "，", "*", "；", "：", "、", "「", "」", "『", "』", "（", "）", "〔", "〕", "【", "】", "《", "》", "〈", "〉", "〖", "〗"]

select = [
    # pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # isort
    "I",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # Ruff Specific Rules
    "RUF",
    # Remove Print Out
    "T",

    # # Additional rules
    # "B",  # bugbear Should be enabled once this branch are merged
    # "C90",  # mccabe
    # "N", # pep8-naming
    # "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    # "ASYNC",  # flake8-async
    # "TRIO",  # flake8-trio
    # "S",  # flake8-bandit
    # "BLE",  # flake8-blind-except
    # "FBT",  # flake8-boolean-trap
    # "A",  # flake8-builtins
    # "COM",  # flake8-commas
    # "CPY",  # flake8-copyright
    # "C4",  # flake8-comprehensions
    # "DTZ",  # flake8-datetimez
    # "T10",  # flake8-debugger
    # "DJ",  # flake8-django
    # "EM",  # flake8-errmsg
    # "EXE",  # flake8-executable
    # "FA",  # flake8-future-annotations
    # "ISC",  # flake8-implicit-str-concat
    # "ICN",  # flake8-import-conventions
    # "G",  # flake8-logging-format
    # "INP",  # flake8-no-pep420
    # "PIE",  # flake8-pie
    # "T20",  # flake8-print
    # "PYI",  # flake8-pyi
    # "PT",  # flake8-pytest-style
    # "Q",  # flake8-quotes
    # "RSE",  # flake8-raise
    # "RET",  # flake8-return
    # "SLF",  # flake8-self
    # "SLOT",  # flake8-slots
    # "SIM",  # flake8-simplify
    # "TID",  # flake8-tidy-imports
    # "TCH",  # flake8-type-checking
    # "INT",  # flake8-gettext
    # "ARG",  # flake8-unused-arguments
    # "PTH",  # flake8-use-pathlib
    # "TD",  # flake8-todos
    # "FIX",  # flake8-fixme
    # "ERA",  # eradicate
    # "PD",  # pandas-vet
    # "PGH",  # pygrep-hooks
    # "PL",  # Pylint
    # "TRY",  # tryceratops
    # "FLY",  # flynt
    # "NPY",  # NumPy-specific rules
    # "AIR",  # Airflow
    # "PERF",  # Perflint
    # "FURB",  # refurb
    # "LOG",  # flake8-logging
]

ignore = [
    # Additional ignore
    "E402", "E501", "F841",
    # Missing Docs in functions
    "D100", "D101", "D102", "D103", "D107", "D205", "D415",
    # Doc line too long
    "W505",
    "N804",
    "E266",
    # Unused imports
    # "F401",
    # No need annotation for `self`
    "ANN101",
    # No need annotation for `cls`
    "ANN102",
    # No need annotation for `__init__`
    "ANN204",
    ]

[tool.ruff.lint.pycodestyle]
# Ignore long comments for TODO, FIXME, XXX
ignore-overlong-task-comments = true
max-doc-length = 99
max-line-length = 99

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
# Accepts: "google", "numpy", or "pep257".
convention = "google"
ignore-decorators = []
property-decorators = []

[tool.ruff.lint.pyflakes]
extend-generics = ["pyrootutils", "autorootcwd", "autoroot"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
"__init__.py" = ["E402"]
"*.ipynb" = ["T201", "F401", "F811", "ANN"]
"tests/*" = ["S101", "ANN"]
"setup.py" = ["ANN"]
# This module is from Ruian, do not change anything for future update.
"connect_pb2.pyi" = ["UP007"]
"connect_pb2_grpc.py" = ["ANN"]
"server/default.py" = ["E731", "ANN201", "ANN202", "T201"]
"server/tma.py" = ["E731", "ANN201", "ANN202", "T201"]

[tool.ruff.lint.isort]
case-sensitive = true
classes = []
combine-as-imports = false
constants = []
default-section = "third-party"
detect-same-package = true
extra-standard-library = []
force-single-line = false
force-sort-within-sections = true
force-to-top = []
force-wrap-aliases = false
forced-separate = []
from-first = false
known-first-party = []
known-local-folder = []
known-third-party = []
length-sort = true
length-sort-straight = true
lines-after-imports = -1
lines-between-types = 0
no-lines-before = ["future", "standard-library"]
no-sections = false
order-by-type = true
relative-imports-order = "furthest-to-closest"
required-imports = []
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
single-line-exclusions = []
split-on-trailing-comma=false
variables = []

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__tablename__", "__table_args__"]
allow-magic-value-types = ["int"]
max-args = 5
max-bool-expr = 5
max-branches = 12
max-public-methods = 20
max-returns = 6
max-statements = 50

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 99
exclude = ["generated"]
indent-style = "space"
line-ending = "auto"
preview = true
quote-style = "double"
skip-magic-trailing-comma = true

# ================== #
#      Logfire       #
# ================== #
[tool.logfire]
send_to_logfire = true
token = "t5yWZMmjyRH5ZVqvJRwwHHfm5L3SgbRjtkk7chW3rjSp"
project_name = "auto-click"
trace_sample_rate = 1.0
show_summary = true
data_dir = ".logfire"
collect_system_metrics = true
id_generator = "uuid"
ns_timestamp_generator = "time_ns"
fast_shutdown = true
inspect_arguments = true
pydantic_plugin_record = "failure"


# ================== #
#     CodeSpell      #
# ================== #

[tool.codespell]
skip = "pyproject.toml,poetry.lock,notebook/.*"
count = false
quiet-level = 3
